const Cart = require('../modals/Cart');

exports.getCart = async (req, res) => {
  try {
    const cart = await Cart.findOne({ userId: req.params.userId }).populate("items.productId");
    res.status(200).json(cart || { items: [] });
  } catch (error) {
    console.log(error)
    console.error("Error in getCart:", error.message);
    res.status(500).json({ success: false, message: "Gagal mengambil keranjang", error: error.message });
  }
};

exports.addToCart = async (req, res) => {
  try {
    const { userId, productId, quantity } = req.body;
    console.log(req.body)
    if (!userId || !productId || !quantity) {
      return res.status(400).json({ success: false, message: "Data tidak lengkap (userId, productId, quantity)" });
    }

    let cart = await Cart.findOne({ userId });
    if (!cart) cart = new Cart({ userId, items: [] });

    const itemIndex = cart.items.findIndex(i => i.productId.toString() === productId);
    if (itemIndex > -1) {
      cart.items[itemIndex].quantity += parseInt(quantity);
    } else {
      cart.items.push({ productId, quantity });
    }

    await cart.save();
    res.status(200).json(cart);
  } catch (error) {
    console.error("Error in addToCart:", error.message);
    res.status(500).json({ success: false, message: "Gagal menambahkan ke keranjang", error: error.message });
  }
};

exports.removeFromCart = async (req, res) => {
  try {
    const { userId, productId } = req.body.userId;
    if (!userId || !productId) {
      console.log(req.body)
      return res.status(400).json({ success: false, message: "Data tidak lengkap (userId, productId)" });
    }

    const cart = await Cart.findOne({ userId });
    if (!cart) return res.status(404).json({ success: false, message: 'Keranjang tidak ditemukan' });

    cart.items = cart.items.filter(i => i.productId.toString() !== productId);
    await cart.save();

    res.status(200).json(cart);
  } catch (error) {
    console.error("Error in removeFromCart:", error.message);
    res.status(500).json({ success: false, message: "Gagal menghapus item dari keranjang", error: error.message });
  }
};

exports.clearCart = async (req, res) => {
  try {
    const result = await Cart.findOneAndDelete({ userId: req.params.userId });
    if (!result) {
      return res.status(404).json({ success: false, message: "Keranjang tidak ditemukan" });
    }

    res.status(200).json({ success: true, message: 'Keranjang berhasil dikosongkan' });
  } catch (error) {
    console.error("Error in clearCart:", error.message);
    res.status(500).json({ success: false, message: "Gagal mengosongkan keranjang", error: error.message });
  }
};
