const ProductSchema = require('../modals/ProductSchema');
const OrderSchema = require('../modals/OrderSchema');
const UserSchema = require('../modals/UserSchema');
require('dotenv').config();
const midtransClient = require('midtrans-client');// sesuaikan dengan lokasi file
const logInteraction = require('../utils/logInteraction');

const placeOrder = async (req, res) => {
    const {
        shippingInfo,
        OrderItems,
        itemsPrice,
        taxPrice,
        shippingPrice,
        totalPrice,
    } = req.body;

    try {
        const order = await OrderSchema.create({
            shippingInfo,
            OrderItems,
            paymentInfo: { id: null, status: 'Pending' },
            paidAt: null,
            itemsPrice,
            taxPrice,
            shippingPrice,
            totalPrice,
            orderStatus: 'Pending',
            userId: req.user.id,
        });

        // console.log(order)

        res.status(201).json({ success: true, orderId: order._id });
    } catch (error) {
        console.error("Error placing order:", error.message);
        res.status(500).json({ success: false, message: error.message });
    }
};

const midtransWebhook = async (req, res) => {
    try {
        const notification = req.body;

        const orderId = notification.order_id;
        const transactionStatus = notification.transaction_status;
        const fraudStatus = notification.fraud_status;

        // Ambil order dari database
        const order = await OrderSchema.findById(orderId);
        if (!order) return res.status(404).json({ message: 'Order not found' });

        // Status berdasarkan transaksi
        if (transactionStatus === 'settlement') {
            order.paymentInfo = {
                id: notification.transaction_id,
                status: 'Paid',
                type: notification.payment_type,
            };
            order.paidAt = new Date();
            order.orderStatus = 'Paid';
        } else if (transactionStatus === 'pending') {
            order.paymentInfo.status = 'Pending';
        } else if (
            transactionStatus === 'cancel' ||
            transactionStatus === 'deny' ||
            transactionStatus === 'expire'
        ) {
            order.paymentInfo.status = 'Failed';
            order.orderStatus = 'Cancelled';
        }

        await order.save();

        res.status(200).json({ success: true, message: 'Notification handled' });
    } catch (error) {
        console.error('Midtrans webhook error:', error.message);
        res.status(500).json({ message: error.message });
    }
};

// controllers/orderController.js
const updateOrderPaymentStatus = async (req, res) => {
    try {
        const order = await OrderSchema.findById(req.params.id).populate('userId');

        if (!order) {
            return res.status(404).json({ success: false, message: "Order not found" });
        }

        const { paymentInfo } = req.body;
        order.paymentInfo = paymentInfo;

        // Jika pembayaran berhasil
        if (paymentInfo.status === 'settlement' || paymentInfo.status === 'capture') {
            order.paidAt = Date.now();
            order.orderStatus = "Paid";

            // âœ… Tambahkan pencatatan interaction
            for (const item of order.OrderItems) {
                await logInteraction({
                    user_id: order.userId._id,
                    product_id: item.productId,
                    type: 'purchase',
                    value: 1
                });
            }
        }

        await order.save({ validateBeforeSave: false });

        res.json({ success: true, message: "Payment status updated successfully" });

    } catch (error) {
        console.log("Error in updateOrderPaymentStatus: ", error.message);
        res.status(500).json({ success: false, message: "Failed to update payment", error: error.message });
    }
};

const getSingleOrderDetail = async (req, res) => {
    const { id } = req.params;
    try {
        console.log(req.params)
        const order = await OrderSchema.findById({ _id: id }).populate("userId", "name email");

        console.log(order)
        if (!order) {
            return res.json({ success: true, message: `Order doesn't found with this id:${id}` });
        }
        res.json({
            success: true,
            data: order,
        })
    } catch (error) {
        console.log("Error in getSingOrderDetail function: ", error.message);
        res.status(500).json({
            success: false,
            message: "Something went wrong, Product is not fetched",
            error: error.message
        });
    }
}

const myOrder = async (req, res) => {
    try {
        const myOrders = await OrderSchema.find({ userId: req.user.id });
        res.json({
            success: true,
            data: myOrders,
        })
    } catch (error) {
        console.log("Error in myOrder function: ", error.message);
        res.status(500).json({
            success: false,
            message: "Something went wrong.",
            error: error.message
        });
    }
}

// Admin --- rights
const getAllOrders = async (req, res) => {
    try {
        const orders = await OrderSchema.find({});
        if (!orders) {
            return res.json({ success: true, message: `Order cart is empty!` });
        }
        let totalAmount = 0;
        orders.forEach((order) => {
            totalAmount += order.totalPrice
        })
        res.json({
            success: true,
            totalAmount,
            data: orders
        })
    } catch (error) {
        console.log("Error in getAllOrders function: ", error.message);
        res.status(500).json({
            success: false,
            message: "Something went wrong.",
            error: error.message
        });
    }
}

// Admin --- rights
const updateOrderStatus = async (req, res) => {
    const { id } = req.params;
    const { orderStatus } = req.body;

    try {
        const order = await OrderSchema.findById(id);
        if (!order) {
            return res.status(404).json({ success: false, message: `Order not found with id: ${id}` });
        }

        const paymentStatus = order.paymentInfo?.status || "pending"; // settlement, pending, dll
        const currentStatus = order.orderStatus; // Paid, Shipped, Delivered

        // Pastikan sudah dibayar (settlement atau capture)
        if (!["settlement", "capture"].includes(paymentStatus)) {
            return res.status(400).json({
                success: false,
                message: "Order belum dibayar, tidak bisa diproses."
            });
        }

        // Validasi transisi status
        const validTransitions = {
            "Paid": "Shipped",
            "Shipped": "Delivered"
        };

        const expectedNextStatus = validTransitions[currentStatus];
        if (expectedNextStatus !== orderStatus) {
            return res.status(400).json({
                success: false,
                message: `Tidak bisa update dari ${currentStatus} ke ${orderStatus}. Transisi yang valid: ${expectedNextStatus}`
            });
        }

        // Jika transisi ke Shipped, update stok produk
        if (orderStatus === "Shipped") {
            for (const item of order.OrderItems) {
                await updateStoke(item.productId, item.quantity);
            }
        }

        // Jika transisi ke Delivered, simpan waktu
        if (orderStatus === "Delivered") {
            order.deliveredAt = Date.now();
        }

        // Simpan status baru
        order.orderStatus = orderStatus;
        await order.save({ validateBeforeSave: false });

        res.json({
            success: true,
            message: `Status berhasil diperbarui menjadi "${orderStatus}"`,
            status: order.orderStatus
        });

    } catch (error) {
        console.error("Error in updateOrderStatus:", error);
        res.status(500).json({
            success: false,
            message: "Terjadi kesalahan server",
            error: error.message
        });
    }
};

// Admin --- rights
const deleteOrder = async (req, res) => {

    const { id } = req.params;
    try {
        const order = await OrderSchema.findById(id);
        if (!order) {
            return res.json({ success: true, message: `Order doesn't found with this id:${id}` });
        }
        res.json({
            success: true,
            message: "Order succesfully removed!"
        })
        await OrderSchema.findByIdAndDelete(id)

    } catch (error) {
        console.log("Error in deleteOrder function: ", error.message);
        res.status(500).json({
            success: false,
            message: "Something went wrong.",
            error: error.message
        });
    }
}

const updateStoke = async (productId, quantity) => {
    try {
        const product = await ProductSchema.findById(productId);
        if (!product) {
            return res.json({ success: true, message: `product doesn't found with this id:${id}` });
        }
        product.Stock -= quantity;
        await product.save({ validateBeforeSave: false });
    } catch (error) {
        console.log("Error in updateStoke function: ", error.message);
        res.status(500).json({
            success: false,
            message: "Something went wrong.",
            error: error.message
        });
    }
}
module.exports = {
    placeOrder,
    getSingleOrderDetail,
    midtransWebhook,
    myOrder,
    getAllOrders,
    updateOrderStatus,
    updateOrderPaymentStatus,
    deleteOrder,
}
