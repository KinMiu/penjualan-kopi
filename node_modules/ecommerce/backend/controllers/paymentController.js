const midtransClient = require('midtrans-client');
const OrderSchema = require('../modals/OrderSchema');

const getMidtransToken = async (req, res) => {
    const { orderId, method } = req.body;

    try {
        const order = await OrderSchema.findById(orderId).populate("userId");
        if (!order) {
            return res.status(404).json({ success: false, message: 'Order tidak ditemukan' });
        }

        const midtransOrderId = `ORDER-${order._id}`;
        const core = new midtransClient.CoreApi({
            isProduction: false,
            serverKey: process.env.MIDTRANS_SERVER_KEY,
            clientKey: process.env.MIDTRANS_CLIENT_KEY,
        });

        const chargePayload = {
            transaction_details: {
                order_id: midtransOrderId,
                gross_amount: Math.round(order.totalPrice),
            },
            customer_details: {
                first_name: order.userId.name,
                email: order.userId.email,
            }
        };

        // === Payment method configuration ===
        if (method === 'qris') {
            chargePayload.payment_type = 'qris';

        } else if (method.endsWith('_va')) {
            const bank = method.replace('_va', '');
            chargePayload.payment_type = 'bank_transfer';
            chargePayload.bank_transfer = { bank };

        } else if (['alfamart', 'indomaret'].includes(method)) {
            chargePayload.payment_type = 'cstore';
            chargePayload.cstore = {
                store: method,
                message: "Silakan tunjukkan kode ini ke kasir.",
            };

        } else if (['gopay', 'dana', 'ovo', 'shopeepay'].includes(method)) {
            chargePayload.payment_type = method;

            if (method === 'shopeepay') {
                chargePayload.shopee_pay = {
                    callback_url: `${process.env.FRONTEND_URL}/payment/success`,
                };
            }

        } else {
            return res.status(400).json({ success: false, message: 'Metode pembayaran tidak dikenali' });
        }

        const chargeRes = await core.charge(chargePayload);
        console.log('[Midtrans Charge]', chargeRes);

        // Simpan ke paymentInfo
        order.paymentInfo = {
            id: chargeRes.transaction_id,
            status: 'Pending',
            type: method,
            midtrans_order_id: midtransOrderId,
            va_number: chargeRes.va_numbers?.[0]?.va_number || null,
            bank: chargeRes.va_numbers?.[0]?.bank || null,
            store: chargeRes.store || null,
            payment_code: chargeRes.payment_code || null,
            qr_string: chargeRes.qr_string || null,
            expiry_time: chargeRes.expiry_time ? new Date(chargeRes.expiry_time) : null,
        };

        await order.save();

        return res.json({
            success: true,
            method,
            midtransOrderId,
            vaNumber: order.paymentInfo.va_number,
            bank: order.paymentInfo.bank,
            store: order.paymentInfo.store,
            payment_code: order.paymentInfo.payment_code,
            qrString: order.paymentInfo.qr_string,
            expiry_time: order.paymentInfo.expiry_time,
            redirectUrl: chargeRes.actions?.find(a => a.name === "generate-qr-code")?.url || null
        });

    } catch (error) {
        console.error("Error in getMidtransToken:", error);
        return res.status(500).json({ success: false, message: error.message });
    }
};

const getPaymentStatus = async (req, res) => {
    const { orderId } = req.params;

    try {
        const order = await OrderSchema.findById(orderId);
        if (!order || !order.paymentInfo?.midtrans_order_id) {
            return res.status(404).json({
                success: false,
                message: 'Order tidak ditemukan atau belum memiliki midtrans_order_id'
            });
        }

        const midtransOrderId = order.paymentInfo.midtrans_order_id;

        const statusRes = await fetch(`https://api.sandbox.midtrans.com/v2/${midtransOrderId}/status`, {
            method: 'GET',
            headers: {
                Authorization: 'Basic ' + Buffer.from(process.env.MIDTRANS_SERVER_KEY + ':').toString('base64'),
                'Content-Type': 'application/json',
            }
        });

        const data = await statusRes.json();

        // Update VA dan expiry jika perlu
        let needSave = false;

        if (data.va_numbers?.length > 0 && !order.paymentInfo.va_number) {
            order.paymentInfo.va_number = data.va_numbers[0].va_number;
            order.paymentInfo.bank = data.va_numbers[0].bank;
            needSave = true;
        }

        if (data.expiry_time && !order.paymentInfo.expiry_time) {
            order.paymentInfo.expiry_time = new Date(data.expiry_time);
            needSave = true;
        }

        if (needSave) await order.save();

        return res.json({
            success: true,
            status: data.transaction_status,
            va_number: data.va_numbers?.[0]?.va_number || null,
            bank: data.va_numbers?.[0]?.bank || null,
            gross_amount: data.gross_amount,
            transaction_time: data.transaction_time,
            expiry_time: data.expiry_time || null,
        });

    } catch (error) {
        console.error("Error getting payment status:", error.message);
        return res.status(500).json({ success: false, message: error.message });
    }
};

module.exports = {
    getMidtransToken,
    getPaymentStatus,
};
