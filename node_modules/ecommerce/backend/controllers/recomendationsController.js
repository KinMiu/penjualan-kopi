const Interaction = require("../models/Interaction");
const Product = require("../models/Product");

exports.getRecommendations = async (req, res) => {
  const userId = req.params.userId;

  try {
    // Ambil semua interaksi user ini
    const userInteractions = await Interaction.find({ user_id: userId });

    if (userInteractions.length === 0) {
      return res.json({ recommendations: [] });
    }

    // Ambil semua produk yang pernah dilihat/beli user ini
    const interactedProductIds = userInteractions.map((i) => i.product_id);

    // Cari interaksi dari user lain pada produk-produk yang sama
    const similarInteractions = await Interaction.find({
      product_id: { $in: interactedProductIds },
      user_id: { $ne: userId },
    });

    const similarUserIds = [...new Set(similarInteractions.map(i => i.user_id))];

    // Ambil produk-produk yang mereka lihat/beli (kecuali yang sudah diinteraksi user)
    const recommendedInteractions = await Interaction.find({
      user_id: { $in: similarUserIds },
      product_id: { $nin: interactedProductIds },
    });

    // Hitung skor rekomendasi berdasarkan frekuensi
    const scoreMap = {};

    for (const inter of recommendedInteractions) {
      if (!scoreMap[inter.product_id]) {
        scoreMap[inter.product_id] = 0;
      }
      scoreMap[inter.product_id] += inter.interaction_value || 1;
    }

    // Urutkan produk berdasarkan skor
    const sortedRecommendations = Object.entries(scoreMap)
      .sort((a, b) => b[1] - a[1])
      .map(([productId]) => productId);

    res.json({ recommendations: sortedRecommendations });

  } catch (error) {
    console.error("Error generating recommendations:", error);
    res.status(500).json({ message: "Gagal menghasilkan rekomendasi" });
  }
};
